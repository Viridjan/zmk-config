/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    // chain-length = <6>;

    chain-length = <31>;// Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

#define AS(keycode) &as LS(keycode) keycode

/ {

    behaviors {
      as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <135>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
    };
        
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  CTRL  |   Q    |   W    |   E    |   R    |   T    |                  ~~~                  |   Y    |   U    |   I    |   O    |   P    |   \    |
            // |  ALT   |   A    |   S    |   D    |   F    |   G    |                  ~~~                  |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  ESC   | SHIFT  |   X    |   C    |   V    |   B    |        |        |~~~|        |        |   N    |   M    |   ,    |   .    |   /    |        |
            //              |  GUI   |  DEL   |  RET   |~~~~| SPACE  |  ESC   |        |~~~|  RET   |        |~~~~|  TAB   |        |        |

            bindings = <
    &kp LEFT_ALT       AS(Q)  AS(W)     AS(E)    AS(R)      AS(T)                                        AS(Y)     AS(U)     AS(I)      AS(O)          AS(P)   &kp BSPC
&kp LEFT_CONTROL       AS(A)  AS(S)     AS(D)    AS(F)      AS(G)                                        AS(H)      AS(J)     AS(K)      AS(L)  &kp SEMICOLON    &kp SQT
         &kp ESC  &kp LSHIFT  AS(Z)     AS(X)    AS(C)     AS(V)  &none  &kp ENTER        &none  &none  AS(B)      AS(N)     AS(M)  &kp COMMA        &kp DOT  &kp RCTRL
                                     &kp LGUI  AS(TAB)  &kp GRAVE  &mo 2  &kp SPACE  &key_repeat  &mo 1  &mo 2  &kp SLASH  &kp BSLH
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2  &kp F3   &kp F4   &kp F5   &kp F6                                  &kp N7  &kp N8  &kp N9    &kp N0     &trans     &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12                                  &kp N4  &kp N5  &kp N6  &kp PLUS  &kp MINUS  &kp EQUAL
&trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &kp STAR  &kp SLASH     &trans
                         &trans   &trans   &trans  &trans  &trans  &trans   &none  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&none  &none  &none  &none  &none  &kp PG_UP                                                &kp HOME       &none      &kp UP      &none  &none  &none
&none  &none  &none  &none  &none  &kp PG_DN                                                 &kp END    &kp LEFT    &kp DOWN  &kp RIGHT  &none  &none
&none  &none  &none  &none  &none      &none  &none  &none             &none  &kp C_VOL_UP     &none       &none       &none      &none  &none  &none
                     &none  &none      &none  &none  &none  &kp C_PLAY_PAUSE  &kp C_VOL_DN     &none  &kp C_PREV  &kp C_NEXT
            >;
        };
    };
};
